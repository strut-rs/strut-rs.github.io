"use strict";(self.webpackChunkstrut_home=self.webpackChunkstrut_home||[]).push([[861],{1470:(e,a,n)=>{n.d(a,{A:()=>j});var s=n(6540),t=n(4164),l=n(3104),r=n(6347),i=n(205),o=n(7485),d=n(1682),c=n(679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function m(e){const{values:a,children:n}=e;return(0,s.useMemo)(()=>{const e=a??function(e){return u(e).map(({props:{value:e,label:a,attributes:n,default:s}})=>({value:e,label:a,attributes:n,default:s}))}(n);return function(e){const a=(0,d.XI)(e,(e,a)=>e.value===a.value);if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[a,n])}function h({value:e,tabValues:a}){return a.some(a=>a.value===e)}function p({queryString:e=!1,groupId:a}){const n=(0,r.W6)(),t=function({queryString:e=!1,groupId:a}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:e,groupId:a});return[(0,o.aZ)(t),(0,s.useCallback)(e=>{if(!t)return;const a=new URLSearchParams(n.location.search);a.set(t,e),n.replace({...n.location,search:a.toString()})},[t,n])]}function f(e){const{defaultValue:a,queryString:n=!1,groupId:t}=e,l=m(e),[r,o]=(0,s.useState)(()=>function({defaultValue:e,tabValues:a}){if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${a.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=a.find(e=>e.default)??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:l})),[d,u]=p({queryString:n,groupId:t}),[f,b]=function({groupId:e}){const a=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,t]=(0,c.Dv)(a);return[n,(0,s.useCallback)(e=>{a&&t.set(e)},[a,t])]}({groupId:t}),_=(()=>{const e=d??f;return h({value:e,tabValues:l})?e:null})();(0,i.A)(()=>{_&&o(_)},[_]);return{selectedValue:r,selectValue:(0,s.useCallback)(e=>{if(!h({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),b(e)},[u,b,l]),tabValues:l}}var b=n(2303);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(4848);function x({className:e,block:a,selectedValue:n,selectValue:s,tabValues:r}){const i=[],{blockElementScrollPositionUntilNextRender:o}=(0,l.a_)(),d=e=>{const a=e.currentTarget,t=i.indexOf(a),l=r[t].value;l!==n&&(o(a),s(l))},c=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;a=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;a=i[n]??i[i.length-1];break}}a?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":a},e),children:r.map(({value:e,label:a,attributes:s})=>(0,g.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{i.push(e)},onKeyDown:c,onClick:d,...s,className:(0,t.A)("tabs__item",_.tabItem,s?.className,{"tabs__item--active":n===e}),children:a??e},e))})}function y({lazy:e,children:a,selectedValue:n}){const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(e){const e=l.find(e=>e.props.value===n);return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:l.map((e,a)=>(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==n}))})}function v(e){const a=f(e);return(0,g.jsxs)("div",{className:(0,t.A)("tabs-container",_.tabList),children:[(0,g.jsx)(x,{...a,...e}),(0,g.jsx)(y,{...a,...e})]})}function j(e){const a=(0,b.A)();return(0,g.jsx)(v,{...e,children:u(e.children)},String(a))}},6490:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"components/database","title":"Database","description":"[this-configuration]: #configuration","source":"@site/docs/06_components/02_database.mdx","sourceDirName":"06_components","slug":"/components/database","permalink":"/docs/components/database","draft":false,"unlisted":false,"editUrl":"https://github.com/strut-rs/strut-rs.github.io/edit/main/docs/06_components/02_database.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"slug":"database","toc_max_heading_level":4},"sidebar":"docs","previous":{"title":"Logging & tracing","permalink":"/docs/components/tracing"},"next":{"title":"RabbitMQ","permalink":"/docs/components/rabbitmq"}}');var t=n(4848),l=n(8453),r=n(1470),i=n(9365);const o={sidebar_position:2,slug:"database",toc_max_heading_level:4},d="Database",c={},u=[{value:"Quickstart",id:"quickstart",level:2},{value:"Cargo features",id:"cargo-features",level:2},{value:"\u26f3\ufe0e Feature <code>database-mysql</code>",id:"feature-database-mysql",level:3},{value:"\u26f3\ufe0e Feature <code>database-postgres</code>",id:"feature-database-postgres",level:3},{value:"\u26f3\ufe0e Feature <code>database-sqlite</code>",id:"feature-database-sqlite",level:3},{value:"\u26f3\ufe0e Feature <code>database-default-mysql</code>",id:"feature-database-default-mysql",level:3},{value:"\u26f3\ufe0e Feature <code>database-default-postgres</code>",id:"feature-database-default-postgres",level:3},{value:"\u26f3\ufe0e Feature <code>database-default-sqlite</code>",id:"feature-database-default-sqlite",level:3},{value:"Default database type",id:"default-database-type",level:3},{value:"Component structure",id:"component-structure",level:2},{value:"\u2611\ufe0e Configuration",id:"configuration",level:3},{value:"MySQL/MariaDB handle",id:"mysqlmariadb-handle",level:4},{value:"PostgreSQL handle",id:"postgresql-handle",level:4},{value:"SQLite handle",id:"sqlite-handle",level:4},{value:"\u2205 Startup",id:"startup",level:3},{value:"\u2611\ufe0e Facade",id:"facade",level:3},{value:"\u2611\ufe0e Spindown",id:"spindown",level:3}];function m(e){const a={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components},{Details:n}=a;return n||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"database",children:"Database"})}),"\n",(0,t.jsxs)(a.p,{children:["Pre-fabricates ",(0,t.jsx)(a.a,{href:"https://crates.io/crates/sqlx",children:(0,t.jsx)(a.code,{children:"sqlx"})})," database connection pools and closes connections during spindown."]}),"\n",(0,t.jsx)(a.h2,{id:"quickstart",children:"Quickstart"}),"\n",(0,t.jsxs)(a.ol,{children:["\n",(0,t.jsxs)(a.li,{children:["Enable one of the ",(0,t.jsx)(a.code,{children:"database-{type}"})," ",(0,t.jsx)(a.a,{href:"#cargo-features",children:"features"}),".\n(Here we use an in-memory SQLite as an example.)"]}),"\n"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"cargo add strut --features database-sqlite\n"})}),"\n",(0,t.jsxs)(a.ol,{start:"2",children:["\n",(0,t.jsx)(a.li,{children:"Configure the default database."}),"\n"]}),"\n",(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database:\n    in_memory: true\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:"[database]\nin_memory = true\n"})})})]}),"\n",(0,t.jsxs)(a.ol,{start:"3",children:["\n",(0,t.jsxs)(a.li,{children:["The ",(0,t.jsx)(a.a,{href:"https://crates.io/crates/sqlx",children:(0,t.jsx)(a.code,{children:"sqlx"})})," lazy connection pool can be retrieved from the ",(0,t.jsx)(a.a,{href:"#facade",children:(0,t.jsx)(a.code,{children:"Database"})})," facade:"]}),"\n"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-rust",children:"use strut::database::sqlx::*;\nuse strut::Database;\n\n#[strut::main]\nasync fn main() {\n    let pool: Pool<Sqlite> = Database::default();\n\n    // connection pool ready to use\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"cargo-features",children:"Cargo features"}),"\n",(0,t.jsxs)(a.h3,{id:"feature-database-mysql",children:["\u26f3\ufe0e Feature ",(0,t.jsx)(a.code,{children:"database-mysql"})]}),"\n",(0,t.jsx)(a.p,{children:"Enables connections to MySQL/MariaDB databases."}),"\n",(0,t.jsxs)(a.h3,{id:"feature-database-postgres",children:["\u26f3\ufe0e Feature ",(0,t.jsx)(a.code,{children:"database-postgres"})]}),"\n",(0,t.jsx)(a.p,{children:"Enables connections to PostgreSQL databases."}),"\n",(0,t.jsxs)(a.h3,{id:"feature-database-sqlite",children:["\u26f3\ufe0e Feature ",(0,t.jsx)(a.code,{children:"database-sqlite"})]}),"\n",(0,t.jsx)(a.p,{children:"Enables connections to SQLite databases."}),"\n",(0,t.jsxs)(a.h3,{id:"feature-database-default-mysql",children:["\u26f3\ufe0e Feature ",(0,t.jsx)(a.code,{children:"database-default-mysql"})]}),"\n",(0,t.jsx)(a.p,{children:"When multiple database types are enabled, marks MySQL/MariaDB as the default type."}),"\n",(0,t.jsxs)(a.h3,{id:"feature-database-default-postgres",children:["\u26f3\ufe0e Feature ",(0,t.jsx)(a.code,{children:"database-default-postgres"})]}),"\n",(0,t.jsx)(a.p,{children:"When multiple database types are enabled, marks PostgreSQL as the default type."}),"\n",(0,t.jsxs)(a.h3,{id:"feature-database-default-sqlite",children:["\u26f3\ufe0e Feature ",(0,t.jsx)(a.code,{children:"database-default-sqlite"})]}),"\n",(0,t.jsx)(a.p,{children:"When multiple database types are enabled, marks SQLite as the default type."}),"\n",(0,t.jsx)(a.h3,{id:"default-database-type",children:"Default database type"}),"\n",(0,t.jsxs)(a.p,{children:["When only one ",(0,t.jsx)(a.code,{children:"database-{type}"})," feature is enabled, this database type is also implicitly treated as the default type.\nWhen multiple database types are enabled, the ambiguity about the default type can be optionally broken using one of the ",(0,t.jsx)(a.code,{children:"database-default-{type}"})," features."]}),"\n",(0,t.jsxs)(a.p,{children:["No more than one of the ",(0,t.jsx)(a.code,{children:"database-default-{type}"})," features may be enabled at a time.\nOtherwise, a compilation error will occur."]}),"\n",(0,t.jsx)(a.p,{children:"It is also valid to not have a default database type at all."}),"\n",(0,t.jsx)(a.h2,{id:"component-structure",children:"Component structure"}),"\n",(0,t.jsx)(a.h3,{id:"configuration",children:"\u2611\ufe0e Configuration"}),"\n",(0,t.jsxs)(a.p,{children:["The database component allows configuring any number of database handles.\nMost applications, however, would need just one.\nIf the features indicate a ",(0,t.jsx)(a.a,{href:"#default-database-type",children:"default database type"}),", then an unnamed default database handle of that type can be configured.\nAll other database handles are named."]}),"\n",(0,t.jsx)(a.p,{children:"A full configuration is structured as such:"}),"\n",(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database:\n    # default database handle goes here\n\n    mysql:\n        named_mysql_a: {} # named_mysql_a database handle goes here\n        named_mysql_b: {} # named_mysql_b database handle goes here\n\n    postgres:\n        named_postgres_a: {} # named_postgres_a database handle goes here\n        named_postgres_b: {} # named_postgres_b database handle goes here\n\n    sqlite:\n        named_sqlite_a: {} # named_sqlite_a database handle goes here\n        named_sqlite_b: {} # named_sqlite_b database handle goes here\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:"[database]\n# default database handle goes here\n\n[database.mysql]\nnamed_mysql_a = {} # named_mysql_a database handle goes here\nnamed_mysql_b = {} # named_mysql_b database handle goes here\n\n[database.postgres]\nnamed_postgres_a = {} # named_postgres_a database handle goes here\nnamed_postgres_b = {} # named_postgres_b database handle goes here\n\n[database.sqlite]\nnamed_sqlite_a = {} # named_sqlite_a database handle goes here\nnamed_sqlite_b = {} # named_sqlite_b database handle goes here\n"})})})]}),"\n",(0,t.jsxs)(a.p,{children:["An empty database handle (like in the example above) doesn\u2019t make much sense (unless you are using a database on ",(0,t.jsx)(a.code,{children:"localhost"})," with default port and credentials).\nBelow are handle examples for each supported database types."]}),"\n",(0,t.jsx)(a.h4,{id:"mysqlmariadb-handle",children:"MySQL/MariaDB handle"}),"\n",(0,t.jsx)(a.p,{children:"A handle may be given using a URL.\nDon\u2019t use this if you intend to overwrite password (or any part of the handle) using environment variables."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsxs)("summary",{children:["MySQL/MariaDB ",(0,t.jsx)(a.strong,{children:"URL"})," handle"]}),(0,t.jsx)(a.p,{children:"Various ways of configuring a MySQL/MariaDB handle as a URL:"}),(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database:\n    url: mysql://root:password@localhost:3306/default # assuming MySQL/MariaDB is the default type\n\n    mysql: # two syntaxes below are equivalent\n        named_mysql_a: mysql://root:password@localhost:3306/named_mysql_a\n        named_mysql_b:\n            url: mysql://root:password@localhost:3306/named_mysql_b\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:'[database]\nurl = "mysql://root:password@localhost:3306/default" # assuming MySQL/MariaDB is the default type\n\n# two syntaxes below are equivalent\n[database.mysql]\nnamed_mysql_a = "mysql://root:password@localhost:3306/named_mysql_a"\n\n[database.mysql.named_mysql_b]\nurl = "mysql://root:password@localhost:3306/named_mysql_b"\n'})})})]})]}),"\n",(0,t.jsx)(a.p,{children:"The exploded form is more appropriate if you plan to overwrite some part of the handle (like the password) using environment variables."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsxs)("summary",{children:["MySQL/MariaDB ",(0,t.jsx)(a.strong,{children:"exploded"})," handle"]}),(0,t.jsx)(a.p,{children:"Ways of configuring a MySQL/MariaDB handle in an exploded form:"}),(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database:\n    host: localhost\n    port: 3306 # assuming MySQL/MariaDB is the default type\n    database: default\n\n    mysql:\n        named_mysql:\n            host: localhost\n            port: 3306\n            database: named_mysql\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:'[database]\nhost = "localhost"\nport = 3306 # assuming MySQL/MariaDB is the default type\ndatabase = "default"\n\n[database.mysql.named_mysql]\nhost = "localhost"\nport = 3306\ndatabase = "named_mysql"\n'})})})]})]}),"\n",(0,t.jsx)(a.p,{children:"The full form is provided below for reference."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsxs)("summary",{children:["MySQL/MariaDB ",(0,t.jsx)(a.strong,{children:"full"})," handle"]}),(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database: # assuming MySQL/MariaDB is the default type\n    host: localhost\n    port: 3306\n    username: root\n    password: password\n    database: db\n    socket: /var/run/mysqld/mysqld.sock\n    ssl_mode: preferred # disabled, preferred (default), required, verify_ca, verify_identity\n    ssl_ca: /etc/ssl/certs/ca-certificates.crt # or inline starting with `-----BEGIN`\n    ssl_client_cert: /etc/ssl/certs/client-cert.pem # as above\n    ssl_client_key: /etc/ssl/private/client-key.pem # as above\n    statement_cache_capacity: 100\n    charset: utf8mb4\n    collation: utf8mb4_unicode_ci\n    log_settings:\n        statements_level: debug # off, error, warn, info, debug, trace\n        slow_statements_level: warn # as above\n        slow_statements_duration: 2s 500ms # parsed using `humantime` crate\n    pipes_as_concat: true\n    enable_cleartext_plugin: false\n    no_engine_substitution: true\n    timezone: +00:00\n    set_names: true\n    pool_options:\n        min_connections: 0\n        max_connections: 10\n        test_before_acquire: true\n        acquire_time_level: off # off, error, warn, info, debug, trace\n        acquire_slow_level: warn # as above\n        acquire_slow_threshold: 2s # parsed using `humantime` crate\n        acquire_timeout: 30s # as above\n        max_lifetime: 30min # as above\n        idle_timeout: 10min # as above\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:'[database] # assuming MySQL/MariaDB is the default type\nhost = "localhost"\nport = 3306\nusername = "root"\npassword = "password"\ndatabase = "db"\nsocket = "/var/run/mysqld/mysqld.sock"\nssl_mode = "preferred" # disabled, preferred (default), required, verify_ca, verify_identity\nssl_ca = "/etc/ssl/certs/ca-certificates.crt" # or inline starting with `-----BEGIN`\nssl_client_cert = "/etc/ssl/certs/client-cert.pem" # as above\nssl_client_key = "/etc/ssl/private/client-key.pem" # as above\nstatement_cache_capacity = 100\ncharset = "utf8mb4"\ncollation = "utf8mb4_unicode_ci"\npipes_as_concat = true\nenable_cleartext_plugin = false\nno_engine_substitution = true\ntimezone = "+00:00"\nset_names = true\n\n[database.log_settings]\nstatements_level = "debug" # off, error, warn, info, debug, trace\nslow_statements_level = "warn" # as above\nslow_statements_duration = "2s 500ms" # parsed using `humantime` crate\n\n[database.pool_options]\nmin_connections = 0\nmax_connections = 10\ntest_before_acquire = true\nacquire_time_level = "off" # off, error, warn, info, debug, trace\nacquire_slow_level = "warn" # as above\nacquire_slow_threshold = "2s" # parsed using `humantime` crate\nacquire_timeout = "30s" # as above\nmax_lifetime = "30min" # as above\nidle_timeout = "10min" # as above\n'})})})]})]}),"\n",(0,t.jsx)(a.h4,{id:"postgresql-handle",children:"PostgreSQL handle"}),"\n",(0,t.jsx)(a.p,{children:"A handle may be given using a URL.\nDon\u2019t use this if you intend to overwrite password (or any part of the handle) using environment variables."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsxs)("summary",{children:["PostgreSQL ",(0,t.jsx)(a.strong,{children:"URL"})," handle"]}),(0,t.jsx)(a.p,{children:"Various ways of configuring a PostgreSQL handle as a URL:"}),(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database:\n    url: postgresql://user:secret@localhost:5433/default # assuming PostgreSQL is the default type\n\n    postgres: # two syntaxes below are equivalent\n        named_postgres_a: postgresql://user:secret@localhost:5433/named_postgres_a\n        named_postgres_b:\n            url: postgresql://user:secret@localhost:5433/named_postgres_b\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:'[database]\nurl = "postgresql://user:secret@localhost:5433/default" # assuming PostgreSQL is the default type\n\n# two syntaxes below are equivalent\n[database.postgres]\nnamed_postgres_a = "postgresql://user:secret@localhost:5433/named_postgres_a"\n\n[database.postgres.named_postgres_b]\nurl = "postgresql://user:secret@localhost:5433/named_postgres_b"\n'})})})]})]}),"\n",(0,t.jsx)(a.p,{children:"The exploded form is more appropriate if you plan to overwrite some part of the handle (like the password) using environment variables."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsxs)("summary",{children:["PostgreSQL ",(0,t.jsx)(a.strong,{children:"exploded"})," handle"]}),(0,t.jsx)(a.p,{children:"Ways of configuring a PostgreSQL handle in an exploded form:"}),(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database:\n    host: localhost\n    port: 5433 # assuming PostgreSQL is the default type\n    database: default\n\n    postgres:\n        named_postgres:\n            host: localhost\n            port: 5433\n            database: named_postgres\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:'[database]\nhost = "localhost"\nport = 5433 # assuming PostgreSQL is the default type\ndatabase = "default"\n\n[database.postgres.named_postgres]\nhost = "localhost"\nport = 5433\ndatabase = "named_postgres"\n'})})})]})]}),"\n",(0,t.jsx)(a.p,{children:"The full form is provided below for reference."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsxs)("summary",{children:["PostgreSQL ",(0,t.jsx)(a.strong,{children:"full"})," handle"]}),(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database: # assuming PostgreSQL is the default type\n    host: localhost\n    port: 5433\n    username: user\n    password: secret\n    database: db\n    socket: /var/run/postgresql/.s.PGSQL.5432\n    ssl_mode: prefer # disable, allow, prefer (default), require, verify_ca, verify_full\n    ssl_root_cert: /etc/ssl/certs/ca-certificates.crt # or inline starting with `-----BEGIN`\n    ssl_client_cert: /etc/ssl/certs/client-cert.pem # as above\n    ssl_client_key: /etc/ssl/private/client-key.pem # as above\n    statement_cache_capacity: 100\n    application_name: my-app\n    log_settings:\n        statements_level: debug # off, error, warn, info, debug, trace\n        slow_statements_level: warn # as above\n        slow_statements_duration: 2s 500ms # parsed using `humantime` crate\n    extra_float_digits: 2\n    options:\n        search_path: myschema,public\n    pool_options:\n        min_connections: 0\n        max_connections: 10\n        test_before_acquire: true\n        acquire_time_level: off # off, error, warn, info, debug, trace\n        acquire_slow_level: warn # as above\n        acquire_slow_threshold: 2s # parsed using `humantime` crate\n        acquire_timeout: 30s # as above\n        max_lifetime: 30min # as above\n        idle_timeout: 10min # as above\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:'[database] # assuming PostgreSQL is the default type\nhost = "localhost"\nport = 5433\nusername = "user"\npassword = "secret"\ndatabase = "db"\nsocket = "/var/run/postgresql/.s.PGSQL.5432"\nssl_mode = "prefer" # disable, allow, prefer (default), require, verify_ca, verify_full\nssl_root_cert = "/etc/ssl/certs/ca-certificates.crt" # or inline starting with `-----BEGIN`\nssl_client_cert = "/etc/ssl/certs/client-cert.pem" # as above\nssl_client_key = "/etc/ssl/private/client-key.pem" # as above\nstatement_cache_capacity = 100\napplication_name = "my-app"\nextra_float_digits = 2\n\n[database.log_settings]\nstatements_level = "debug" # off, error, warn, info, debug, trace\nslow_statements_level = "warn" # as above\nslow_statements_duration = "2s 500ms" # parsed using `humantime` crate\n\n[database.options]\nsearch_path = "myschema,public"\n\n[database.pool_options]\nmin_connections = 0\nmax_connections = 10\ntest_before_acquire = true\nacquire_time_level = "off" # off, error, warn, info, debug, trace\nacquire_slow_level = "warn" # as above\nacquire_slow_threshold = "2s" # parsed using `humantime` crate\nacquire_timeout = "30s" # as above\nmax_lifetime = "30min" # as above\nidle_timeout = "10min" # as above\n'})})})]})]}),"\n",(0,t.jsx)(a.h4,{id:"sqlite-handle",children:"SQLite handle"}),"\n",(0,t.jsx)(a.p,{children:"A handle may be given using a URL.\nDon\u2019t use this if you intend to overwrite password (or any part of the handle) using environment variables."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsxs)("summary",{children:["SQLite ",(0,t.jsx)(a.strong,{children:"URL"})," handle"]}),(0,t.jsx)(a.p,{children:"Various ways of configuring a SQLite handle as a URL:"}),(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database:\n    url: sqlite://default.db?mode=ro # assuming SQLite is the default type\n\n    sqlite: # two syntaxes below are equivalent\n        named_sqlite_a: sqlite://named_sqlite_a.db?mode=ro\n        named_sqlite_b:\n            url: sqlite://named_sqlite_b.db?mode=ro\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:'[database]\nurl = "sqlite://default.db?mode=ro" # assuming SQLite is the default type\n\n# two syntaxes below are equivalent\n[database.sqlite]\nnamed_sqlite_a = "sqlite://named_sqlite_a.db?mode=ro"\n\n[database.sqlite.named_sqlite_b]\nurl = "sqlite://named_sqlite_b.db?mode=ro"\n'})})})]})]}),"\n",(0,t.jsx)(a.p,{children:"The exploded form is more appropriate if you plan to overwrite some part of the handle (like the password) using environment variables."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsxs)("summary",{children:["SQLite ",(0,t.jsx)(a.strong,{children:"exploded"})," handle"]}),(0,t.jsx)(a.p,{children:"Ways of configuring a SQLite handle in an exploded form:"}),(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database: # assuming SQLite is the default type\n    filename: 'default.db'\n    in_memory: false\n    read_only: false\n    create_if_missing: false\n\n    sqlite:\n        named_sqlite:\n            filename: 'named_sqlite.db'\n            in_memory: false\n            read_only: false\n            create_if_missing: false\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:'[database] # assuming SQLite is the default type\nfilename = "default.db"\nin_memory = false\nread_only = false\ncreate_if_missing = false\n\n[database.sqlite.named_sqlite]\nfilename = "named_sqlite.db"\nin_memory = false\nread_only = false\ncreate_if_missing = false\n'})})})]})]}),"\n",(0,t.jsx)(a.p,{children:"The full form is provided below for reference."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsxs)("summary",{children:["SQLite ",(0,t.jsx)(a.strong,{children:"full"})," handle"]}),(0,t.jsxs)(r.A,{children:[(0,t.jsx)(i.A,{value:"YAML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-yaml",metastring:'title="config/database.yaml"',children:"database: # assuming SQLite is the default type\n    filename: ':memory:'\n    in_memory: true\n    read_only: false\n    create_if_missing: false\n    shared_cache: false\n    statement_cache_capacity: 100\n    busy_timeout: 5s # parsed using `humantime` crate\n    log_settings:\n        statements_level: debug # off, error, warn, info, debug, trace\n        slow_statements_level: warn # as above\n        slow_statements_duration: 2s 500ms # parsed using `humantime` crate\n    immutable: false\n    vfs: unix-dotfile\n    pragmas:\n        foreign_keys: ON\n    extensions:\n        extension_a: /path/to/entrypoint\n    command_channel_size: 50\n    row_channel_size: 50\n    serialized: false\n    thread_name_prefix: sqlx-sqlite-worker-\n    optimize_on_close:\n        enabled: false\n        analysis_limit: 50\n    pool_options:\n        min_connections: 0\n        max_connections: 10\n        test_before_acquire: true\n        acquire_time_level: off # off, error, warn, info, debug, trace\n        acquire_slow_level: warn # as above\n        acquire_slow_threshold: 2s # parsed using `humantime` crate\n        acquire_timeout: 30s # as above\n        max_lifetime: 30min # as above\n        idle_timeout: 10min # as above\n"})})}),(0,t.jsx)(i.A,{value:"TOML",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-toml",metastring:'title="config/database.toml"',children:'[database] # assuming SQLite is the default type\nfilename = ":memory:"\nin_memory = true\nread_only = false\ncreate_if_missing = false\nshared_cache = false\nstatement_cache_capacity = 100\nbusy_timeout = "5s" # parsed using `humantime` crate\nimmutable = false\nvfs = "unix-dotfile"\ncommand_channel_size = 50\nrow_channel_size = 50\nserialized = false\nthread_name_prefix = "sqlx-sqlite-worker-"\n\n[database.log_settings]\nstatements_level = "debug" # off, error, warn, info, debug, trace\nslow_statements_level = "warn" # as above\nslow_statements_duration = "2s 500ms" # parsed using `humantime` crate\n\n[database.pragmas]\nforeign_keys = "ON"\n\n[database.extensions]\nextension_a = "/path/to/entrypoint"\n\n[database.optimize_on_close]\nenabled = false\nanalysis_limit = 50\n\n[database.pool_options]\nmin_connections = 0\nmax_connections = 10\ntest_before_acquire = true\nacquire_time_level = "off" # off, error, warn, info, debug, trace\nacquire_slow_level = "warn" # as above\nacquire_slow_threshold = "2s" # parsed using `humantime` crate\nacquire_timeout = "30s" # as above\nmax_lifetime = "30min" # as above\nidle_timeout = "10min" # as above\n'})})})]})]}),"\n",(0,t.jsx)(a.h3,{id:"startup",children:"\u2205 Startup"}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.em,{children:"This component does not include any startup logic."})}),"\n",(0,t.jsx)(a.h3,{id:"facade",children:"\u2611\ufe0e Facade"}),"\n",(0,t.jsxs)(a.p,{children:["Use the ",(0,t.jsx)(a.a,{href:"https://docs.rs/strut/latest/strut/struct.Database.html",children:(0,t.jsx)(a.code,{children:"Database"})})," facade to retrieve the ",(0,t.jsx)(a.a,{href:"#configuration",children:"pre-configured"})," ",(0,t.jsx)(a.code,{children:"sqlx"})," database ",(0,t.jsx)(a.a,{href:"https://docs.rs/sqlx/latest/sqlx/struct.Pool.html",children:"connection pools"}),"."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-rust",children:'use strut::database::sqlx::*;\nuse strut::Database;\n\n#[strut::main]\nasync fn main() {\n    let default_mysql: Pool<MySql> = Database::default(); // assuming MySQL/MariaDB is the default type\n\n    let named_mysql: Pool<MySql> = Database::mysql("named_mysql");\n    let named_postgres: Pool<Postgres> = Database::postgres("named_postgres");\n    let named_sqlite: Pool<Sqlite> = Database::sqlite("named_sqlite");\n}\n'})}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Returned pools are lazy \u2014 there cannot be a connection error until you try to use it."}),"\n",(0,t.jsx)(a.li,{children:"The default pool and each of the named pools are singletons (initialized once, then cloned)."}),"\n",(0,t.jsx)(a.li,{children:"Retrieving an undefined name will result in a panic."}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"spindown",children:"\u2611\ufe0e Spindown"}),"\n",(0,t.jsxs)(a.p,{children:["The component automatically attempts to close connections in all connection pools during ",(0,t.jsx)(a.a,{href:"https://docs.rs/strut/latest/strut/struct.AppSpindown.html",children:"spindown"}),"."]})]})}function h(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>i});var s=n(6540);const t={},l=s.createContext(t);function r(e){const a=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:a},e.children)}},9365:(e,a,n)=>{n.d(a,{A:()=>r});n(6540);var s=n(4164);const t={tabItem:"tabItem_Ymn6"};var l=n(4848);function r({children:e,hidden:a,className:n}){return(0,l.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,n),hidden:a,children:e})}}}]);