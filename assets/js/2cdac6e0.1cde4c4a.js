"use strict";(self.webpackChunkstrut_home=self.webpackChunkstrut_home||[]).push([[47],{1470:(e,n,t)=>{t.d(n,{A:()=>y});var r=t(6540),s=t(4164),a=t(3104),i=t(6347),o=t(205),l=t(7485),c=t(1682),d=t(679);function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function b({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(s),(0,r.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})},[s,t])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=h(e),[i,l]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!b({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:a})),[c,u]=m({queryString:t,groupId:s}),[g,p]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,d.Dv)(n);return[t,(0,r.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),f=(()=>{const e=c??g;return b({value:e,tabValues:a})?e:null})();(0,o.A)(()=>{f&&l(f)},[f]);return{selectedValue:i,selectValue:(0,r.useCallback)(e=>{if(!b({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),p(e)},[u,p,a]),tabValues:a}}var p=t(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(4848);function j({className:e,block:n,selectedValue:t,selectValue:r,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),c=e=>{const n=e.currentTarget,s=o.indexOf(n),a=i[s].value;a!==t&&(l(n),r(a))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:r})=>(0,x.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...r,className:(0,s.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:t}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===t);return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function q(e){const n=g(e);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,x.jsx)(j,{...n,...e}),(0,x.jsx)(v,{...n,...e})]})}function y(e){const n=(0,p.A)();return(0,x.jsx)(q,{...e,children:u(e.children)},String(n))}},5622:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>b,frontMatter:()=>l,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"components/rabbitmq","title":"RabbitMQ","description":"[this-configuration]: #configuration","source":"@site/docs/06_components/03_rabbitmq.mdx","sourceDirName":"06_components","slug":"/components/rabbitmq","permalink":"/docs/components/rabbitmq","draft":false,"unlisted":false,"editUrl":"https://github.com/strut-rs/strut-rs.github.io/edit/main/docs/06_components/03_rabbitmq.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"slug":"rabbitmq","toc_max_heading_level":4},"sidebar":"docs","previous":{"title":"Database","permalink":"/docs/components/database"},"next":{"title":"Sentry","permalink":"/docs/components/sentry"}}');var s=t(4848),a=t(8453),i=t(1470),o=t(9365);const l={sidebar_position:3,slug:"rabbitmq",toc_max_heading_level:4},c="RabbitMQ",d={},u=[{value:"Quickstart",id:"quickstart",level:2},{value:"Cargo features",id:"cargo-features",level:2},{value:"\u26f3\ufe0e Feature <code>rabbitmq</code>",id:"feature-rabbitmq",level:3},{value:"\u26f3\ufe0e Feature <code>rabbitmq-json</code>",id:"feature-rabbitmq-json",level:3},{value:"Component structure",id:"component-structure",level:2},{value:"\u2611\ufe0e Configuration",id:"configuration",level:3},{value:"Egress (publisher) config",id:"egress-publisher-config",level:4},{value:"Ingress (subscriber) config",id:"ingress-subscriber-config",level:4},{value:"\u2205 Startup",id:"startup",level:3},{value:"\u2611\ufe0e Facade",id:"facade",level:3},{value:"\u2611\ufe0e Spindown",id:"spindown",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rabbitmq",children:"RabbitMQ"})}),"\n",(0,s.jsxs)(n.p,{children:["Wraps the ",(0,s.jsx)(n.a,{href:"https://crates.io/crates/lapin",children:(0,s.jsx)(n.code,{children:"lapin"})})," crate for convenient sending and receiving of RabbitMQ messages.\nSupports sending and receiving in batches."]}),"\n",(0,s.jsx)(n.admonition,{title:"RabbitMQ versions",type:"note",children:(0,s.jsx)(n.p,{children:"This component works with (and is tested against) the most recent versions of both RabbitMQ 3 and RabbitMQ 4."})}),"\n",(0,s.jsxs)(n.admonition,{title:"AMQP 0-9-1",type:"warning",children:[(0,s.jsxs)(n.p,{children:["This component (as well as the underlying ",(0,s.jsx)(n.a,{href:"https://crates.io/crates/lapin",children:(0,s.jsx)(n.code,{children:"lapin"})})," crate) targets the ",(0,s.jsx)(n.a,{href:"https://www.rabbitmq.com/amqp-0-9-1-protocol",children:"AMQP 0-9-1"})," protocol, as implemented by the popular broker ",(0,s.jsx)(n.a,{href:"https://www.rabbitmq.com",children:"RabbitMQ"}),".\nDespite the similarity in name and lineage, the ",(0,s.jsx)(n.a,{href:"https://www.rabbitmq.com/docs/amqp",children:"AMQP 1.0"})," protocol is completely different from AMQP 0-9-1 and is out of scope for this component, despite native support from RabbitMQ since version 4.0.\nOn the same note, ",(0,s.jsx)(n.a,{href:"https://www.rabbitmq.com/docs/streams",children:"RabbitMQ Streams"})," are not part of either of the AMQP-named protocols, and are also not covered by this component."]}),(0,s.jsx)(n.p,{children:"Some level of understanding of the AMQP 0-9-1 protocol and its implementation by RabbitMQ are required to use this component.\nThe following parts of the RabbitMQ documentation are excellent sources of knowledge:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.rabbitmq.com/tutorials/amqp-concepts",children:"AMQP 0-9-1 Model Explained"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.rabbitmq.com/tutorials",children:"RabbitMQ tutorials"})}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"quickstart",children:"Quickstart"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Enable the ",(0,s.jsx)(n.code,{children:"rabbitmq"})," ",(0,s.jsx)(n.a,{href:"#cargo-features",children:"feature"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo add strut --features rabbitmq\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Configure an egress (outgoing message route) and an ingress (incoming message route)."}),"\n"]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"YAML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="config/rabbitmq.yaml"',children:"rabbitmq:\n    egress:\n        demo_egress:\n            routing_key: demo.key\n\n    ingress:\n        demo_ingress:\n            queue: demo.key\n"})})}),(0,s.jsx)(o.A,{value:"TOML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'title="config/rabbitmq.toml"',children:'[rabbitmq.egress.demo_egress]\nrouting_key = "demo.key"\n\n[rabbitmq.ingress.demo_ingress]\nqueue = "demo.key"\n'})})})]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Retrieve the publisher (for the egress) and the subscriber (for the ingress) from the ",(0,s.jsx)(n.a,{href:"#facade",children:(0,s.jsx)(n.code,{children:"RabbitMQ"})})," facade and use them:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use strut::rabbitmq::*;\nuse strut::RabbitMq;\n\n#[strut::main]\nasync fn main() {\n    // Make publisher and subscriber\n    let publisher: Publisher = RabbitMq::publisher("demo_egress");\n    let subscriber: StringSubscriber = RabbitMq::string_subscriber("demo_ingress");\n\n    // Ensure the queue exists before we start sending\n    subscriber.declare().await;\n\n    // Send message\n    publisher.publish("Demo message").await;\n\n    // Receive message\n    let envelope: Envelope<String> = subscriber.receive().await;\n\n    assert_eq!(envelope.payload(), "Demo message");\n\n    // Ack message\n    envelope.complete().await;\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"cargo-features",children:"Cargo features"}),"\n",(0,s.jsxs)(n.h3,{id:"feature-rabbitmq",children:["\u26f3\ufe0e Feature ",(0,s.jsx)(n.code,{children:"rabbitmq"})]}),"\n",(0,s.jsx)(n.p,{children:"This is the main gateway feature of this component."}),"\n",(0,s.jsxs)(n.h3,{id:"feature-rabbitmq-json",children:["\u26f3\ufe0e Feature ",(0,s.jsx)(n.code,{children:"rabbitmq-json"})]}),"\n",(0,s.jsxs)(n.p,{children:["Enables encoding/decoding messages to/from JSON using the ",(0,s.jsx)(n.a,{href:"https://crates.io/crates/serde-json",children:(0,s.jsx)(n.code,{children:"serde-json"})}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"component-structure",children:"Component structure"}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"\u2611\ufe0e Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["The RabbitMQ component allows configuring any number of RabbitMQ handles (sets of credentials).\nMost applications, however, would need just one.\nThe default, unnamed handle is used implicitly by the ",(0,s.jsx)(n.a,{href:"#facade",children:(0,s.jsx)(n.code,{children:"RabbitMq"})})," facade.\nAll other RabbitMQ handles are named and may be retrieved from ",(0,s.jsx)(n.a,{href:"https://docs.rs/strut/latest/strut/struct.AppConfig.html",children:(0,s.jsx)(n.code,{children:"AppConfig"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The component also allows configuring any number of RabbitMQ ",(0,s.jsx)(n.a,{href:"#egress-publisher-config",children:"egresses"})," and ",(0,s.jsx)(n.a,{href:"#ingress-subscriber-config",children:"ingresses"}),".\nTheir corresponding ",(0,s.jsx)(n.a,{href:"https://docs.rs/strut-rabbitmq/latest/strut_rabbitmq/transport/struct.Publisher.html",children:(0,s.jsx)(n.code,{children:"Publisher"})}),"s and ",(0,s.jsx)(n.a,{href:"https://docs.rs/strut-rabbitmq/latest/strut_rabbitmq/transport/struct.Subscriber.html",children:(0,s.jsx)(n.code,{children:"Subscriber"})}),"s can be retrieved from the component ",(0,s.jsx)(n.a,{href:"#facade",children:"facade"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"A full configuration is structured as such:"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"YAML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="config/rabbitmq.yaml"',children:'rabbitmq:\n    host: localhost # default RabbitMQ handle\n    port: 5672\n    user: guest\n    password: guest\n    vhost: /\n\n    extra: # additional named RabbitMQ handles\n        named_handle:\n            host: localhost\n            port: 3372\n            user: admin\n            password: admin\n            vhost: /custom\n\n    egress:\n        named_publisher: "routing.key" # publisher definition goes here\n\n    ingress:\n        named_subscriber: "queue.name" # subscriber definition goes here\n'})})}),(0,s.jsx)(o.A,{value:"TOML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'title="config/rabbitmq.toml"',children:'[rabbitmq]\nhost = "localhost" # default RabbitMQ handle\nport = 5672\nuser = "guest"\npassword = "guest"\nvhost = "/"\n\n[rabbitmq.extra.named_handle] # additional named RabbitMQ handles\nhost = "localhost"\nport = 3372\nuser = "admin"\npassword = "admin"\nvhost = "/custom"\n\n[rabbitmq.egress]\nnamed_publisher = "routing.key" # publisher definition goes here\n\n[rabbitmq.ingress]\nnamed_subscriber = "queue.name" # subscriber definition goes here\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"Both a publisher and a subscriber require at least one configuration value: a routing key and a queue name, respectively.\nMore detailed configuration examples for both are given below."}),"\n",(0,s.jsx)(n.h4,{id:"egress-publisher-config",children:"Egress (publisher) config"}),"\n",(0,s.jsx)(n.p,{children:"An egress is an outgoing (away from the application) route for sending messages to RabbitMQ.\nThe most basic form of an egress definition is simply a routing key to send the message to, as shown below."}),"\n",(0,s.jsxs)(n.admonition,{title:"Egress doesn\u2019t declare exchange and queue",type:"warning",children:[(0,s.jsxs)(n.p,{children:["Egress and its ",(0,s.jsx)(n.a,{href:"https://docs.rs/strut-rabbitmq/latest/strut_rabbitmq/transport/struct.Publisher.html",children:(0,s.jsx)(n.code,{children:"Publisher"})})," merely target the configured RabbitMQ exchange and queue by name.\nIt does not declare (create) them on the broker."]}),(0,s.jsxs)(n.p,{children:["Declarations are performed on the receiving side, by the ",(0,s.jsx)(n.a,{href:"https://docs.rs/strut-rabbitmq/latest/strut_rabbitmq/transport/struct.Subscriber.html",children:(0,s.jsx)(n.code,{children:"Subscriber"})}),"."]})]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"YAML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="config/rabbitmq.yaml"',children:"rabbitmq:\n    egress:\n        named_egress: demo.routing.key\n"})})}),(0,s.jsx)(o.A,{value:"TOML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'title="config/rabbitmq.toml"',children:'[rabbitmq.egress]\nnamed_egress = "demo.routing.key"\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"A full egress definition is structured as shown below:"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"YAML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="config/rabbitmq.yaml"',children:"rabbitmq:\n    egress:\n        named_egress:\n            exchange: amq.topic\n            routing_key: demo.routing.key\n            confirmation: routed # transmitted (default), accepted, routed\n            force_durable: false\n"})})}),(0,s.jsx)(o.A,{value:"TOML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'title="config/rabbitmq.toml"',children:'[rabbitmq.egress.named_egress]\nexchange = "amq.topic"\nrouting_key = "demo.routing.key"\nconfirmation = "routed" # transmitted (default), accepted, routed\nforce_durable = false\n'})})})]}),"\n",(0,s.jsx)(n.h4,{id:"ingress-subscriber-config",children:"Ingress (subscriber) config"}),"\n",(0,s.jsx)(n.p,{children:"An ingress is an incoming (toward the application) route for receiving messages from RabbitMQ.\nThe most basic form of an ingress definition is simply a queue name to create and subscribe to, as shown below."}),"\n",(0,s.jsx)(n.admonition,{title:"Ingress declares exchange and queue",type:"note",children:(0,s.jsxs)(n.p,{children:["Ingress and its ",(0,s.jsx)(n.a,{href:"https://docs.rs/strut-rabbitmq/latest/strut_rabbitmq/transport/struct.Subscriber.html",children:(0,s.jsx)(n.code,{children:"Subscriber"})})," are responsible for declaring the RabbitMQ exchange and queue, as well as creating bindings between them.\nConsequently, ingress configuration is the place for configuring objects on the broker."]})}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"YAML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="config/rabbitmq.yaml"',children:"rabbitmq:\n    ingress:\n        named_ingress: demo.queue.name\n"})})}),(0,s.jsx)(o.A,{value:"TOML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'title="config/rabbitmq.toml"',children:'[rabbitmq.ingress]\nnamed_ingress = "demo.queue.name"\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"A full ingress definition is structured as shown below:"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"YAML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="config/rabbitmq.yaml"',children:"rabbitmq:\n    ingress:\n        named_ingress:\n            exchange:\n                name: demo.exchange.name\n                kind: direct # direct (default), fanout, headers, topic, hash_key, hash_id\n                durable: true\n                auto_delete: false\n            queue: demo.queue.name\n            durable: false\n            exclusive: false\n            auto_delete: false\n            batch_size: 1\n            batch_timeout: 250ms\n            prefetch_count: ~\n            acking_behavior: manual # manual (default), auto\n            gibberish_behavior: complete # complete (default), backwash, abandon\n            binding_keys:\n                - demo.binding.key.1\n                - demo.binding.key.2\n#           binding_headers: # commented out because direct exchange cannot have headers\n#               header_a: 12\n#               header_b: true\n            headers_behavior: all # all (default), any\n"})})}),(0,s.jsx)(o.A,{value:"TOML",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'title="config/rabbitmq.toml"',children:'[rabbitmq.ingress.named_ingress.exchange]\nname = "demo.exchange.name"\nkind = "direct" # direct (default), fanout, headers, topic, hash_key, hash_id\ndurable = true\nauto_delete = false\n\n[rabbitmq.ingress.named_ingress]\nqueue = "demo.queue.name"\ndurable = false\nexclusive = false\nauto_delete = false\nbatch_size = 1\nbatch_timeout = "250ms"\n# prefetch_count = 100 # TOML doesn\u2019t support null values, so we have to omit the value if we don\u2019t want any prefetch\nacking_behavior = "manual" # manual (default), auto\ngibberish_behavior = "complete" # complete (default), backwash, abandon\nbinding_keys = [\n  "demo.binding.key.1",\n  "demo.binding.key.2"\n]\n# binding_headers = { header_a = 12, header_b = true } # commented out because direct exchange cannot have headers\nheaders_behavior = "all" # all (default), any\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"startup",children:"\u2205 Startup"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"This component does not include any startup logic."})}),"\n",(0,s.jsx)(n.h3,{id:"facade",children:"\u2611\ufe0e Facade"}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.a,{href:"https://docs.rs/strut/latest/strut/struct.RabbitMq.html",children:(0,s.jsx)(n.code,{children:"RabbitMq"})})," facade to retrieve the ",(0,s.jsx)(n.a,{href:"#configuration",children:"pre-configured"})," ",(0,s.jsx)(n.a,{href:"https://docs.rs/strut-rabbitmq/latest/strut_rabbitmq/transport/struct.Publisher.html",children:(0,s.jsx)(n.code,{children:"Publisher"})}),"s and ",(0,s.jsx)(n.a,{href:"https://docs.rs/strut-rabbitmq/latest/strut_rabbitmq/transport/struct.Subscriber.html",children:(0,s.jsx)(n.code,{children:"Subscriber"})}),"s."]}),"\n",(0,s.jsx)(n.h3,{id:"spindown",children:"\u2611\ufe0e Spindown"}),"\n",(0,s.jsxs)(n.p,{children:["The component automatically attempts to close all open connections to RabbitMQ during ",(0,s.jsx)(n.a,{href:"https://docs.rs/strut/latest/strut/struct.AppSpindown.html",children:"spindown"}),"."]})]})}function b(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var r=t(4164);const s={tabItem:"tabItem_Ymn6"};var a=t(4848);function i({children:e,hidden:n,className:t}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,t),hidden:n,children:e})}}}]);