"use strict";(self.webpackChunkstrut_home=self.webpackChunkstrut_home||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"inception","metadata":{"permalink":"/blog/inception","editUrl":"https://github.com/strut-rs/strut-rs.github.io/edit/main/blog/2025-07-29-inception/index.md","source":"@site/blog/2025-07-29-inception/index.md","title":"Inception","description":"Strut was created to address real pain points.","date":"2025-07-29T00:00:00.000Z","tags":[{"inline":false,"label":"Development","permalink":"/blog/tags/dev","description":"Strut development announcements"}],"readingTime":1.72,"hasTruncateMarker":true,"authors":[{"name":"Erik Sargazakov","title":"Strut maintainer","url":"https://www.linkedin.com/in/lambdas-and-latte/","page":{"permalink":"/blog/authors/erik"},"socials":{"linkedin":"https://www.linkedin.com/in/lambdas-and-latte/","github":"https://github.com/no-simpler"},"imageURL":"https://github.com/no-simpler.png","key":"erik"}],"frontMatter":{"slug":"inception","title":"Inception","authors":["erik"],"tags":["dev"]},"unlisted":false},"content":"Strut was created to address real pain points.\\n\\nWhen I began developing backend services in Rust, I quickly realized how much boilerplate stood between me and my first meaningful line of business logic.\\nBefore I could build anything useful, I had to set up configuration, logging, and manually wire up persistence, messaging, and alerting.\\nThat meant introducing an async runtime, and then worrying about how to gracefully shut down all those external connections when the application exited.\\nAnd once I finally had everything working, I found myself dreading the thought of repeating this setup for the next backend\u2014copy-pasting all that code was hardly ideal.\\n\\n\x3c!-- truncate --\x3e\\n\\nStrut aims to make this process painless.\\nIt\u2019s a convenience and configuration layer\u2014a crate that gathers and pre-configures popular crates commonly used in backend development.\\nThe idea is simple: enable or disable backend features with minimal code.\\nStrut provides sensible defaults and promotes straightforward, intuitive conventions.\\n\\nImportantly, Strut is not a _framework_.\\nRust\u2019s language design doesn\u2019t mesh well with traditional dependency injection, and I didn\u2019t want to force a framework where it wasn\u2019t needed.\\nMy focus was on eliminating repetitive configuration, not imposing too much structure.\\n\\nThe first public release of Strut includes the essentials:\\n\\n- Asynchronous runtime ([`tokio`][tokio])\\n- Externalized configuration ([`config`][config])\\n- Logging ([`tracing`][tracing])\\n- Alerting ([`sentry`][sentry])\\n- Persistence ([`sqlx`][sqlx])\\n- Messaging ([`lapin`][lapin])\\n\\n[tokio]: https://crates.io/crates/tokio\\n[config]: https://crates.io/crates/config\\n[tracing]: https://crates.io/crates/tracing\\n[sentry]: https://crates.io/crates/sentry\\n[sqlx]: https://crates.io/crates/sqlx\\n[lapin]: https://crates.io/crates/lapin\\n\\nThe async runtime and configuration are always included, while the rest are opt-in via feature flags.\\n\\nStrut deliberately avoids plug-and-play support for alternative libraries.\\nFor example, asynchrony is provided exclusively through `tokio`\u2014there\u2019s no option to swap in `async-std`, `smol`, or others.\\nThis decision is intentional: Strut values consistency and simplicity over maximum flexibility.\\n\\nLooking ahead, I plan to expand Strut\u2019s component lineup as new needs emerge.\\nIf you\u2019d like to contribute, please check out [`CONTRIBUTING.md`][contributing].\\n\\n[contributing]: https://github.com/strut-rs/strut/blob/master/CONTRIBUTING.md"}]}}')}}]);